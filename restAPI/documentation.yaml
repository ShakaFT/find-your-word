openapi: 3.0.0
info:
  version: 1.0.0
  title: Documentation REST API - Find Your Word

tags:
- name: Lifecycle
  description: Endpoints related to lifecycle of app
- name: Scores
  description: Endpoints related to scores management
- name: Users
  description: Endpoints related to users management
- name: Words
  description: Endpoints related to words management

paths:

  #  ----- Lifecycle  ----------------------------------------

  /start:
    get:
      summary: Get start data
      description: Get data when app is launched
      tags:
      - Lifecycle
      responses:
        '200':
          description:
          content:
            application/json:
              schema:
                type: object
                properties:
                  allowed_langs:
                    type: array
                    items:
                      type: string
                    example:
                    - en
                    - en
                  maximum_word_length:
                    type: integer
                    example: 11
                  minimum_word_length:
                    type: integer
                    example: 4

  #  ----- Scores  ----------------------------------------

  /score:
    get:
      summary: Get score
      description: This endpoint returns score for a daily word.
      tags:
      - Scores
      parameters:
      - name: lang
        in: query
        description: lang must matches with **ISO 3166-1 alpha-2** format.
        required: true
        schema:
          type: string
          example: fr
      - name: timestamp
        in: query
        description: timestamp of daily word.
        required: true
        schema:
          type: integer
          example: 1683756000000
      - name: username
        in: query
        description: username of current user.
        required: true
        schema:
          type: string
          example: my_username
      responses:
        '200':
          description: |-
            - `best_scores` is the top 10 scores for the selected daily word.

            - `personal_score` exists only if user has register a score.
          content:
            application/json:
              schema:
                type: object
                properties:
                  best_scores:
                    type: array
                    items:
                      type: object
                      properties:
                        tries:
                          type: integer
                          example: 3
                        username:
                          type: string
                          example: my_username
                  personal_score:
                    type: object
                    properties:
                      tries:
                        type: integer
                        example: 3
                      username:
                        type: string
                        example: my_username
        '400':
          description: Invalid payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
    post:
      summary: Add score
      description: This endpoint adds a new score for a user's daily word.
      tags:
      - Scores
      requestBody:
        description: |-
          - `lang` must matches with **ISO 3166-1 alpha-2** format.

          - `timestamp` of daily word.
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - lang
              - timestamp
              - tries
              - username
              properties:
                lang:
                  type: string
                  example: fr
                timestamp:
                  type: integer
                  example: 1683756000000
                tries:
                  type: integer
                  example: 3
                username:
                  type: string
                  example: my_username
      responses:
        '204':
          description: Score added successfully !
        '400':
          description: Invalid payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

  #  ----- Users  ----------------------------------------

  /user:
    post:
      summary: Create new user
      description: This endpoint creates a new user.
      tags:
      - Users
      requestBody:
        description:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - email
              - password
              - username
              properties:
                email:
                  type: string
                  example: email@gmail.com
                password:
                  type: string
                  example: example_password
                username:
                  type: string
                  example: my_username
      responses:
        '200':
          description: |-
            - `email_exists` is set to `true` if email is already used by another user.

            - `username_exists` is set to `true` if username is already used by another user.

            - `user_id` is optional, it only appears if fields email_exists and username_exists are `false`.
          content:
            application/json:
              schema:
                type: object
                properties:
                  email_exists:
                    type: boolean
                    default: false
                  username_exists:
                    type: boolean
                    default: false
                  user_id:
                    type: string
                    example: 645a3411376ceb87800ab180
        '400':
          description: Invalid payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

  /user/login:
    post:
      summary: Login user
      description: This endpoint logins user and retruns user data.
      tags:
      - Users
      requestBody:
        description:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - email
              - password
              properties:
                email:
                  type: string
                  example: email@gmail.com
                password:
                  type: string
                  example: example_password
      responses:
        '200':
          description: |-
            - `login` is set to `false` if email or password is invalid.

            - `user` is optional, it only appears if field `login` is set to `true`.
          content:
            application/json:
              schema:
                type: object
                properties:
                  login:
                    type: boolean
                    default: true
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 645a3411376ceb87800ab180a
                      email:
                        type: string
                        example: email@gmail.com
                      username:
                        type: string
                        example: my_username

        '400':
          description: Invalid payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

  /user/{user_id}:
    delete:
      summary: Delete user
      description: This endpoint deletes user.
      tags:
      - Users
      parameters:
      - name: user_id
        in: path
        description: id of the user.
        required: true
        schema:
          type: string
          example: 645a3411376ceb87800ab180a
      requestBody:
        description:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - password
              properties:
                password:
                  type: string
                  example: my_password
      responses:
        '200':
          description: |-
            - `success` is set to `false` if password is invalid.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: true

        '400':
          description: Invalid payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

  /user/{user_id}/password:
    put:
      summary: Update user password
      description: This endpoint updates user password.
      tags:
      - Users
      parameters:
      - name: user_id
        in: path
        description: id of the user.
        required: true
        schema:
          type: string
          example: 645a3411376ceb87800ab180a
      requestBody:
        description:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - old_password
              - new_password
              properties:
                old_password:
                  type: string
                  example: old_password
                new_password:
                  type: string
                  example: new_password
      responses:
        '200':
          description: |-
            - `success` is set to `false` if old_password is invalid.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: true

        '400':
          description: Invalid payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

  /user/{user_id}/profile:
    put:
      summary: Update user profile
      description: This endpoint updates user profile.
      tags:
      - Users
      parameters:
      - name: user_id
        in: path
        description: id of the user.
        required: true
        schema:
          type: string
          example: 645a3411376ceb87800ab180a
      requestBody:
        description:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - email
              - password
              - username
              properties:
                email:
                  type: string
                  example: new.email@gmail.com
                password:
                  type: string
                  example: new_password
                username:
                  type: string
                  example: my_new_username
      responses:
        '200':
          description: |-
            - `email_exists` is set to `true` if email is already used by another user.

            - `success` is set to `false` if password is invalid.

            - `username_exists` is set to `true` if username is already used by another user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  email_exists:
                    type: boolean
                    default: false
                  success:
                    type: boolean
                    default: true
                  username_exists:
                    type: boolean
                    default: false

        '400':
          description: Invalid payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

  #  ----- Words  ----------------------------------------

  /word/daily:
    get:
      summary: Get daily word
      description: This endpoint returns all daily words.
      tags:
      - Words
      responses:
        '200':
          description: Successfully get daily words!
          content:
            application/json:
              schema:
                type: object
                properties:
                  daily_words:
                    type: object
                    properties:
                      en:
                        type: object
                        properties:
                          timestamp:
                            type: integer
                            example: 1683756000000
                          word:
                            type: string
                            example: SAMPLE
                      fr:
                        type: object
                        properties:
                          timestamp:
                            type: integer
                            example: 1683756000000
                          word:
                            type: string
                            example: CONTRECOURBES
        '400':
          description: Invalid payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

  /word/exists:
    get:
      summary: Check if word exists
      description: This endpoint checks if word exists.
      tags:
      - Words
      parameters:
      - name: lang
        in: query
        description: lang must matches with **ISO 3166-1 alpha-2** format.
        required: true
        schema:
          type: string
          example: en
      - name: word
        in: query
        required: true
        schema:
          type: string
          example: HELLO
      responses:
        '200':
          description: |-
            - `exists` is set to `true` if this word exists.
          content:
            application/json:
              schema:
                type: object
                properties:
                  exists:
                    type: boolean
                    default: true
        '400':
          description: Invalid payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

  /word/random:
    get:
      summary: Get random word
      description: This endpoint returns random word.
      tags:
      - Words
      parameters:
      - name: lang
        in: query
        description: lang must matches with **ISO 3166-1 alpha-2** format.
        required: true
        schema:
          type: string
          example: en
      - name: length
        in: query
        required: true
        schema:
          type: integer
          example: 5
      responses:
        '200':
          description: Successfully get random word.
          content:
            application/json:
              schema:
                type: object
                properties:
                  word:
                    type: string
                    default: HELLO
        '400':
          description: Invalid payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

components:
  schemas:
    errorResponse:
      type: object
      properties:
        error:
          type: string
          example: Invalid payload
